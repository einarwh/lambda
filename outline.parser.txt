// Primitive characters parsers: 

pchar 'a';;

// Examples, single character
get (pchar 'a') "a"
get (pchar 'a') "c"

get lower "a"
get lower "abc"
get lower "Abc"

// Examples, multiple characters
get (many1 lower) "abc" --> char List

// Try to parse Var 



get (many1 lower |>> (fun cs ))


run (pchar 'a') "a";;
run (pchar 'a') "b";;

lower;;

run lower "a";;
run lower "aB";;

run (many1 lower) "abc";;
run (many1 lower) "aB";;

let get p s = 
  let res = run p s
  match res with
  | Success (exp, _, _) -> exp
  | Failure (x, _, _) ->
    failwith x

// Test:
get varParser "abc" = Var "abc"

let varNameParser = 
  many1 lower |>> (fun cs -> new String(List.toArray(cs))) 

let varParser = 
  varNameParser |>> Var

// Test#1: 
"位x.x" |> get lamParser1 = Lam ("x", Var "x")

// Test#2: 
"位f.位x.x" |> get lamParser1 = Lam ("f", Lam ("x", Var "x"))

let lamParser1 = 
  let p1 = pchar '位' >>. varNameParser
  let p2 = pchar '.' >>. expParser
  pipe2 p1 p2 (fun (s, e) -> Lam (s, e))



